advanced_regex_negative_lookbehind_non_compliant.yaml Status = FAIL
FAILED rules
advanced_regex_negative_lookbehind_rule.guard/default    FAIL
---
Evaluation of rules advanced_regex_negative_lookbehind_rule.guard against data advanced_regex_negative_lookbehind_non_compliant.yaml
--
Property [/NotAwsAccessKey] in data [advanced_regex_negative_lookbehind_non_compliant.yaml] is not compliant with [advanced_regex_negative_lookbehind_rule.guard/default] because provided value ["AKIAIOSFODNN7EXAMPLE"] did match expected value ["/(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9])/"]. Error Message []
Property [/NotSecretAccessKey] in data [advanced_regex_negative_lookbehind_non_compliant.yaml] is not compliant with [advanced_regex_negative_lookbehind_rule.guard/default] because provided value ["wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"] did match expected value ["/(?<![A-Za-z0-9\\/+=])[A-Za-z0-9\\/+=]{40}(?![A-Za-z0-9\\/+=])/"]. Error Message []
--
s3-public-read-prohibited-template-compliant.yaml Status = FAIL
FAILED rules
advanced_regex_negative_lookbehind_rule.guard/default    FAIL
---
Evaluating data s3-public-read-prohibited-template-compliant.yaml against rules advanced_regex_negative_lookbehind_rule.guard
Number of non-compliant resources 0
s3-public-read-prohibited-template-non-compliant.yaml Status = FAIL
FAILED rules
advanced_regex_negative_lookbehind_rule.guard/default    FAIL
---
Evaluating data s3-public-read-prohibited-template-non-compliant.yaml against rules advanced_regex_negative_lookbehind_rule.guard
Number of non-compliant resources 0
s3-server-side-encryption-template-compliant.yaml Status = FAIL
FAILED rules
advanced_regex_negative_lookbehind_rule.guard/default    FAIL
---
Evaluating data s3-server-side-encryption-template-compliant.yaml against rules advanced_regex_negative_lookbehind_rule.guard
Number of non-compliant resources 0
s3-server-side-encryption-template-non-compliant.yaml Status = FAIL
FAILED rules
advanced_regex_negative_lookbehind_rule.guard/default    FAIL
---
Evaluating data s3-server-side-encryption-template-non-compliant.yaml against rules advanced_regex_negative_lookbehind_rule.guard
Number of non-compliant resources 0
s3-public-read-prohibited-template-compliant.yaml Status = FAIL
FAILED rules
s3_bucket_logging_enabled.guard/S3_BUCKET_LOGGING_ENABLED    FAIL
---
Evaluating data s3-public-read-prohibited-template-compliant.yaml against rules s3_bucket_logging_enabled.guard
Number of non-compliant resources 1
Resource = MyBucket {
  Type      = AWS::S3::Bucket
  Rule = S3_BUCKET_LOGGING_ENABLED {
    ALL {
      Check =  %s3_buckets_bucket_logging_enabled[*].Properties.LoggingConfiguration EXISTS   {
        Message {
          Violation: S3 Bucket Logging needs to be configured to enable logging.
          Fix: Set the S3 Bucket property LoggingConfiguration to start logging into S3 bucket.
        }
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:8,C:6]
          MissingProperty = LoggingConfiguration
          Reason = Could not find key LoggingConfiguration inside struct at path /Resources/MyBucket/Properties[L:8,C:6]
          Code:
                6.  MyBucket:
                7.    Type: AWS::S3::Bucket
                8.    Properties:
                9.      PublicAccessBlockConfiguration:
               10.        BlockPublicAcls: true
               11.        BlockPublicPolicy: true
        }
      }
    }
  }
}
s3-public-read-prohibited-template-non-compliant.yaml Status = FAIL
FAILED rules
s3_bucket_logging_enabled.guard/S3_BUCKET_LOGGING_ENABLED    FAIL
---
Evaluating data s3-public-read-prohibited-template-non-compliant.yaml against rules s3_bucket_logging_enabled.guard
Number of non-compliant resources 1
Resource = MyBucket {
  Type      = AWS::S3::Bucket
  Rule = S3_BUCKET_LOGGING_ENABLED {
    ALL {
      Check =  %s3_buckets_bucket_logging_enabled[*].Properties.LoggingConfiguration EXISTS   {
        Message {
          Violation: S3 Bucket Logging needs to be configured to enable logging.
          Fix: Set the S3 Bucket property LoggingConfiguration to start logging into S3 bucket.
        }
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:13,C:6]
          MissingProperty = LoggingConfiguration
          Reason = Could not find key LoggingConfiguration inside struct at path /Resources/MyBucket/Properties[L:13,C:6]
          Code:
               11.      #   BlockPublicPolicy: true
               12.      #   IgnorePublicAcls: true
               13.      #   RestrictPublicBuckets: true
               14.      BucketEncryption:
               15.        ServerSideEncryptionConfiguration:
               16.          - ServerSideEncryptionByDefault:
        }
      }
    }
  }
}
s3-server-side-encryption-template-compliant.yaml Status = FAIL
FAILED rules
s3_bucket_logging_enabled.guard/S3_BUCKET_LOGGING_ENABLED    FAIL
---
Evaluating data s3-server-side-encryption-template-compliant.yaml against rules s3_bucket_logging_enabled.guard
Number of non-compliant resources 1
Resource = MyBucket {
  Type      = AWS::S3::Bucket
  Rule = S3_BUCKET_LOGGING_ENABLED {
    ALL {
      Check =  %s3_buckets_bucket_logging_enabled[*].Properties.LoggingConfiguration EXISTS   {
        Message {
          Violation: S3 Bucket Logging needs to be configured to enable logging.
          Fix: Set the S3 Bucket property LoggingConfiguration to start logging into S3 bucket.
        }
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:8,C:6]
          MissingProperty = LoggingConfiguration
          Reason = Could not find key LoggingConfiguration inside struct at path /Resources/MyBucket/Properties[L:8,C:6]
          Code:
                6.  MyBucket:
                7.    Type: AWS::S3::Bucket
                8.    Properties:
                9.      PublicAccessBlockConfiguration:
               10.        BlockPublicAcls: true
               11.        BlockPublicPolicy: true
        }
      }
    }
  }
}
s3-server-side-encryption-template-non-compliant.yaml Status = FAIL
FAILED rules
s3_bucket_logging_enabled.guard/S3_BUCKET_LOGGING_ENABLED    FAIL
---
Evaluating data s3-server-side-encryption-template-non-compliant.yaml against rules s3_bucket_logging_enabled.guard
Number of non-compliant resources 1
Resource = MyBucket {
  Type      = AWS::S3::Bucket
  Rule = S3_BUCKET_LOGGING_ENABLED {
    ALL {
      Check =  %s3_buckets_bucket_logging_enabled[*].Properties.LoggingConfiguration EXISTS   {
        Message {
          Violation: S3 Bucket Logging needs to be configured to enable logging.
          Fix: Set the S3 Bucket property LoggingConfiguration to start logging into S3 bucket.
        }
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:8,C:6]
          MissingProperty = LoggingConfiguration
          Reason = Could not find key LoggingConfiguration inside struct at path /Resources/MyBucket/Properties[L:8,C:6]
          Code:
                6.  MyBucket:
                7.    Type: AWS::S3::Bucket
                8.    Properties:
                9.      PublicAccessBlockConfiguration:
               10.        BlockPublicAcls: true
               11.        BlockPublicPolicy: true
        }
      }
    }
  }
}
s3-public-read-prohibited-template-non-compliant.yaml Status = FAIL
FAILED rules
s3_bucket_public_read_prohibited.guard/S3_BUCKET_PUBLIC_READ_PROHIBITED    FAIL
---
Evaluating data s3-public-read-prohibited-template-non-compliant.yaml against rules s3_bucket_public_read_prohibited.guard
Number of non-compliant resources 1
Resource = MyBucket {
  Type      = AWS::S3::Bucket
  Rule = S3_BUCKET_PUBLIC_READ_PROHIBITED {
    ALL {
      Check =  %s3_bucket_public_read_prohibited[*].Properties.PublicAccessBlockConfiguration EXISTS   {
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:13,C:6]
          MissingProperty = PublicAccessBlockConfiguration
          Reason = Could not find key PublicAccessBlockConfiguration inside struct at path /Resources/MyBucket/Properties[L:13,C:6]
          Code:
               11.      #   BlockPublicPolicy: true
               12.      #   IgnorePublicAcls: true
               13.      #   RestrictPublicBuckets: true
               14.      BucketEncryption:
               15.        ServerSideEncryptionConfiguration:
               16.          - ServerSideEncryptionByDefault:
        }
      }
      Check =  %s3_bucket_public_read_prohibited[*].Properties.PublicAccessBlockConfiguration.BlockPublicAcls EQUALS  true {
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:13,C:6]
          MissingProperty = PublicAccessBlockConfiguration.BlockPublicAcls
          Reason = Could not find key PublicAccessBlockConfiguration inside struct at path /Resources/MyBucket/Properties[L:13,C:6]
          Code:
               11.      #   BlockPublicPolicy: true
               12.      #   IgnorePublicAcls: true
               13.      #   RestrictPublicBuckets: true
               14.      BucketEncryption:
               15.        ServerSideEncryptionConfiguration:
               16.          - ServerSideEncryptionByDefault:
        }
      }
      Check =  %s3_bucket_public_read_prohibited[*].Properties.PublicAccessBlockConfiguration.BlockPublicPolicy EQUALS  true {
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:13,C:6]
          MissingProperty = PublicAccessBlockConfiguration.BlockPublicPolicy
          Reason = Could not find key PublicAccessBlockConfiguration inside struct at path /Resources/MyBucket/Properties[L:13,C:6]
          Code:
               11.      #   BlockPublicPolicy: true
               12.      #   IgnorePublicAcls: true
               13.      #   RestrictPublicBuckets: true
               14.      BucketEncryption:
               15.        ServerSideEncryptionConfiguration:
               16.          - ServerSideEncryptionByDefault:
        }
      }
      Check =  %s3_bucket_public_read_prohibited[*].Properties.PublicAccessBlockConfiguration.IgnorePublicAcls EQUALS  true {
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:13,C:6]
          MissingProperty = PublicAccessBlockConfiguration.IgnorePublicAcls
          Reason = Could not find key PublicAccessBlockConfiguration inside struct at path /Resources/MyBucket/Properties[L:13,C:6]
          Code:
               11.      #   BlockPublicPolicy: true
               12.      #   IgnorePublicAcls: true
               13.      #   RestrictPublicBuckets: true
               14.      BucketEncryption:
               15.        ServerSideEncryptionConfiguration:
               16.          - ServerSideEncryptionByDefault:
        }
      }
      Check =  %s3_bucket_public_read_prohibited[*].Properties.PublicAccessBlockConfiguration.RestrictPublicBuckets EQUALS  true {
        Message {
          Violation: S3 Bucket Public Write Access controls need to be restricted.
          Fix: Set S3 Bucket PublicAccessBlockConfiguration properties for BlockPublicAcls, BlockPublicPolicy, IgnorePublicAcls, RestrictPublicBuckets parameters to true.
        }
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties[L:13,C:6]
          MissingProperty = PublicAccessBlockConfiguration.RestrictPublicBuckets
          Reason = Could not find key PublicAccessBlockConfiguration inside struct at path /Resources/MyBucket/Properties[L:13,C:6]
          Code:
               11.      #   BlockPublicPolicy: true
               12.      #   IgnorePublicAcls: true
               13.      #   RestrictPublicBuckets: true
               14.      BucketEncryption:
               15.        ServerSideEncryptionConfiguration:
               16.          - ServerSideEncryptionByDefault:
        }
      }
    }
  }
}
s3-server-side-encryption-template-non-compliant.yaml Status = FAIL
FAILED rules
s3_bucket_server_side_encryption_enabled.guard/S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED    FAIL
---
Evaluating data s3-server-side-encryption-template-non-compliant.yaml against rules s3_bucket_server_side_encryption_enabled.guard
Number of non-compliant resources 1
Resource = MyBucket {
  Type      = AWS::S3::Bucket
  Rule = S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED {
    ALL {
      Check =  %s3_buckets_server_side_encryption[*].Properties.BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm IN  ["aws:kms","AES256"] {
        Message {
          Violation: S3 Bucket must enable server-side encryption.
          Fix: Set the S3 Bucket property BucketEncryption.ServerSideEncryptionConfiguration.ServerSideEncryptionByDefault.SSEAlgorithm to either "aws:kms" or "AES256"
        }
        RequiredPropertyError {
          PropertyPath = /Resources/MyBucket/Properties/BucketEncryption[L:13,C:23]
          MissingProperty = ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm
          Reason = Attempting to retrieve from key ServerSideEncryptionConfiguration but type is not an struct type at path /Resources/MyBucket/Properties/BucketEncryption[L:13,C:23], Type = String, Value = String((Path("/Resources/MyBucket/Properties/BucketEncryption", Location { line: 13, col: 23 }), ""))
          Code:
               11.        BlockPublicPolicy: true
               12.        IgnorePublicAcls: true
               13.        RestrictPublicBuckets: true
               14.      BucketEncryption:
               15.      VersioningConfiguration:
               16.        Status: Enabled
        }
      }
    }
  }
}

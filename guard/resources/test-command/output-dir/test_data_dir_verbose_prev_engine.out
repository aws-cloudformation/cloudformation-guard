Testing Guard File resources/test-command/dir/s3_bucket_logging_enabled.guard
Test Case #1
Name: Empty, SKIP
Rule(S3_BUCKET_LOGGING_ENABLED, SKIP)
    |  Message: DEFAULT MESSAGE(SKIP)
    Condition(S3_BUCKET_LOGGING_ENABLED, FAIL)
        |  Message: DEFAULT MESSAGE(FAIL)
        Clause( %s3_buckets_bucket_logging_enabled not EMPTY  , FAIL)
            |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [], values: {} }))
            |  Message: (DEFAULT: NO_MESSAGE)
  PASS Rules:
    S3_BUCKET_LOGGING_ENABLED: Expected = SKIP, Evaluated = SKIP

Test Case #2
Name: No resources, SKIP
Rule(S3_BUCKET_LOGGING_ENABLED, SKIP)
    |  Message: DEFAULT MESSAGE(SKIP)
    Condition(S3_BUCKET_LOGGING_ENABLED, FAIL)
        |  Message: DEFAULT MESSAGE(FAIL)
        Clause( %s3_buckets_bucket_logging_enabled not EMPTY  , FAIL)
            |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources", Location { line: 0, col: 0 }), "Resources"))], values: {"Resources": Map((Path("/Resources", Location { line: 0, col: 0 }), MapValue { keys: [], values: {} }))} }))
            |  Message: (DEFAULT: NO_MESSAGE)
  PASS Rules:
    S3_BUCKET_LOGGING_ENABLED: Expected = SKIP, Evaluated = SKIP

Test Case #3
Name: S3 Bucket with Logging Configuration present in resource, PASS
Rule(S3_BUCKET_LOGGING_ENABLED, PASS)
    |  Message: DEFAULT MESSAGE(PASS)
    Condition(S3_BUCKET_LOGGING_ENABLED, PASS)
        |  Message: DEFAULT MESSAGE(PASS)
        Clause( %s3_buckets_bucket_logging_enabled not EMPTY  , PASS)
            |  From: Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName")), String((Path("/Resources/ExampleS3/Properties/VersioningConfiguration", Location { line: 0, col: 0 }), "VersioningConfiguration")), String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration", Location { line: 0, col: 0 }), "LoggingConfiguration"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket")), "VersioningConfiguration": Map((Path("/Resources/ExampleS3/Properties/VersioningConfiguration", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/VersioningConfiguration/Status", Location { line: 0, col: 0 }), "Status"))], values: {"Status": String((Path("/Resources/ExampleS3/Properties/VersioningConfiguration/Status", Location { line: 0, col: 0 }), "Enabled"))} })), "LoggingConfiguration": Map((Path("/Resources/ExampleS3/Properties/LoggingConfiguration", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName", Location { line: 0, col: 0 }), "DestinationBucketName")), String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/LogFilePrefix", Location { line: 0, col: 0 }), "LogFilePrefix"))], values: {"DestinationBucketName": Map((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName/Ref", Location { line: 0, col: 0 }), "Ref"))], values: {"Ref": String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName/Ref", Location { line: 0, col: 0 }), "LoggingBucket"))} })), "LogFilePrefix": String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/LogFilePrefix", Location { line: 0, col: 0 }), "testing-logs"))} }))} }))} }))
            |  Message: DEFAULT MESSAGE(PASS)
    Clause( %s3_buckets_bucket_logging_enabled[*].Properties.LoggingConfiguration EXISTS  , PASS)
        |  From: Map((Path("/Resources/ExampleS3/Properties/LoggingConfiguration", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName", Location { line: 0, col: 0 }), "DestinationBucketName")), String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/LogFilePrefix", Location { line: 0, col: 0 }), "LogFilePrefix"))], values: {"DestinationBucketName": Map((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName/Ref", Location { line: 0, col: 0 }), "Ref"))], values: {"Ref": String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/DestinationBucketName/Ref", Location { line: 0, col: 0 }), "LoggingBucket"))} })), "LogFilePrefix": String((Path("/Resources/ExampleS3/Properties/LoggingConfiguration/LogFilePrefix", Location { line: 0, col: 0 }), "testing-logs"))} }))
        |  Message: DEFAULT MESSAGE(PASS)
  PASS Rules:
    S3_BUCKET_LOGGING_ENABLED: Expected = PASS, Evaluated = PASS

Test Case #4
Name: S3 Bucket with Logging Configuration missing, FAIL
Rule(S3_BUCKET_LOGGING_ENABLED, FAIL)
    |  Message: DEFAULT MESSAGE(FAIL)
    Condition(S3_BUCKET_LOGGING_ENABLED, PASS)
        |  Message: DEFAULT MESSAGE(PASS)
        Clause( %s3_buckets_bucket_logging_enabled not EMPTY  , PASS)
            |  From: Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket"))} }))} }))
            |  Message: DEFAULT MESSAGE(PASS)
    Clause( %s3_buckets_bucket_logging_enabled[*].Properties.LoggingConfiguration EXISTS  , FAIL)
        |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources", Location { line: 0, col: 0 }), "Resources"))], values: {"Resources": Map((Path("/Resources", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), "ExampleS3"))], values: {"ExampleS3": Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket"))} }))} }))} }))} }))
        |  Message: 
    Violation: S3 Bucket Logging needs to be configured to enable logging.
    Fix: Set the S3 Bucket property LoggingConfiguration to start logging into S3 bucket.
  
  PASS Rules:
    S3_BUCKET_LOGGING_ENABLED: Expected = FAIL, Evaluated = FAIL

Test Case #5
Name: S3 Bucket with Logging Configuration missing with suppression, SKIP
Rule(S3_BUCKET_LOGGING_ENABLED, SKIP)
    |  Message: DEFAULT MESSAGE(SKIP)
    Condition(S3_BUCKET_LOGGING_ENABLED, FAIL)
        |  Message: DEFAULT MESSAGE(FAIL)
        Clause( %s3_buckets_bucket_logging_enabled not EMPTY  , FAIL)
            |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources", Location { line: 0, col: 0 }), "Resources"))], values: {"Resources": Map((Path("/Resources", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), "ExampleS3"))], values: {"ExampleS3": Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Metadata", Location { line: 0, col: 0 }), "Metadata")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Metadata": Map((Path("/Resources/ExampleS3/Metadata", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Metadata/guard", Location { line: 0, col: 0 }), "guard"))], values: {"guard": Map((Path("/Resources/ExampleS3/Metadata/guard", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Metadata/guard/SuppressedRules", Location { line: 0, col: 0 }), "SuppressedRules"))], values: {"SuppressedRules": List((Path("/Resources/ExampleS3/Metadata/guard/SuppressedRules", Location { line: 0, col: 0 }), [String((Path("/Resources/ExampleS3/Metadata/guard/SuppressedRules/0", Location { line: 0, col: 0 }), "S3_BUCKET_LOGGING_ENABLED"))]))} }))} })), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket"))} }))} }))} }))} }))
            |  Message: (DEFAULT: NO_MESSAGE)
  PASS Rules:
    S3_BUCKET_LOGGING_ENABLED: Expected = SKIP, Evaluated = SKIP

---
Testing Guard File resources/test-command/dir/s3_bucket_server_side_encryption_enabled.guard
Test Case #1
Name: Empty, SKIP
Rule(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, SKIP)
    |  Message: DEFAULT MESSAGE(SKIP)
    Condition(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, FAIL)
        |  Message: DEFAULT MESSAGE(FAIL)
        Clause( %s3_buckets_server_side_encryption not EMPTY  , FAIL)
            |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [], values: {} }))
            |  Message: (DEFAULT: NO_MESSAGE)
  PASS Rules:
    S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED: Expected = SKIP, Evaluated = SKIP

Test Case #2
Name: No resources, SKIP
Rule(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, SKIP)
    |  Message: DEFAULT MESSAGE(SKIP)
    Condition(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, FAIL)
        |  Message: DEFAULT MESSAGE(FAIL)
        Clause( %s3_buckets_server_side_encryption not EMPTY  , FAIL)
            |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources", Location { line: 0, col: 0 }), "Resources"))], values: {"Resources": Map((Path("/Resources", Location { line: 0, col: 0 }), MapValue { keys: [], values: {} }))} }))
            |  Message: (DEFAULT: NO_MESSAGE)
  PASS Rules:
    S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED: Expected = SKIP, Evaluated = SKIP

Test Case #3
Name: S3 Bucket Encryption set to SSE AES 256, PASS
Rule(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, PASS)
    |  Message: DEFAULT MESSAGE(PASS)
    Condition(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, PASS)
        |  Message: DEFAULT MESSAGE(PASS)
        Clause( %s3_buckets_server_side_encryption not EMPTY  , PASS)
            |  From: Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName")), String((Path("/Resources/ExampleS3/Properties/BucketEncryption", Location { line: 0, col: 0 }), "BucketEncryption"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket")), "BucketEncryption": Map((Path("/Resources/ExampleS3/Properties/BucketEncryption", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), "ServerSideEncryptionConfiguration"))], values: {"ServerSideEncryptionConfiguration": List((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), [Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), "ServerSideEncryptionByDefault"))], values: {"ServerSideEncryptionByDefault": Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "SSEAlgorithm"))], values: {"SSEAlgorithm": String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "AES256"))} }))} }))]))} }))} }))} }))
            |  Message: DEFAULT MESSAGE(PASS)
    Clause( %s3_buckets_server_side_encryption[*].Properties.BucketEncryption EXISTS  , PASS)
        |  From: Map((Path("/Resources/ExampleS3/Properties/BucketEncryption", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), "ServerSideEncryptionConfiguration"))], values: {"ServerSideEncryptionConfiguration": List((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), [Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), "ServerSideEncryptionByDefault"))], values: {"ServerSideEncryptionByDefault": Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "SSEAlgorithm"))], values: {"SSEAlgorithm": String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "AES256"))} }))} }))]))} }))
        |  Message: DEFAULT MESSAGE(PASS)
  PASS Rules:
    S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED: Expected = PASS, Evaluated = PASS

Test Case #4
Name: S3 Bucket Encryption set to SSE AWS KMS key, PASS
Rule(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, PASS)
    |  Message: DEFAULT MESSAGE(PASS)
    Condition(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, PASS)
        |  Message: DEFAULT MESSAGE(PASS)
        Clause( %s3_buckets_server_side_encryption not EMPTY  , PASS)
            |  From: Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName")), String((Path("/Resources/ExampleS3/Properties/BucketEncryption", Location { line: 0, col: 0 }), "BucketEncryption"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket")), "BucketEncryption": Map((Path("/Resources/ExampleS3/Properties/BucketEncryption", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), "ServerSideEncryptionConfiguration"))], values: {"ServerSideEncryptionConfiguration": List((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), [Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), "ServerSideEncryptionByDefault"))], values: {"ServerSideEncryptionByDefault": Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "SSEAlgorithm")), String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/KMSMasterKeyID", Location { line: 0, col: 0 }), "KMSMasterKeyID"))], values: {"SSEAlgorithm": String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "aws:kms")), "KMSMasterKeyID": String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/KMSMasterKeyID", Location { line: 0, col: 0 }), "ARN:AWS:12345678912"))} }))} }))]))} }))} }))} }))
            |  Message: DEFAULT MESSAGE(PASS)
    Clause( %s3_buckets_server_side_encryption[*].Properties.BucketEncryption EXISTS  , PASS)
        |  From: Map((Path("/Resources/ExampleS3/Properties/BucketEncryption", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), "ServerSideEncryptionConfiguration"))], values: {"ServerSideEncryptionConfiguration": List((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration", Location { line: 0, col: 0 }), [Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), "ServerSideEncryptionByDefault"))], values: {"ServerSideEncryptionByDefault": Map((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "SSEAlgorithm")), String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/KMSMasterKeyID", Location { line: 0, col: 0 }), "KMSMasterKeyID"))], values: {"SSEAlgorithm": String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/SSEAlgorithm", Location { line: 0, col: 0 }), "aws:kms")), "KMSMasterKeyID": String((Path("/Resources/ExampleS3/Properties/BucketEncryption/ServerSideEncryptionConfiguration/0/ServerSideEncryptionByDefault/KMSMasterKeyID", Location { line: 0, col: 0 }), "ARN:AWS:12345678912"))} }))} }))]))} }))
        |  Message: DEFAULT MESSAGE(PASS)
  PASS Rules:
    S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED: Expected = PASS, Evaluated = PASS

Test Case #5
Name: S3 Bucket Encryption not set, FAIL
Rule(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, FAIL)
    |  Message: DEFAULT MESSAGE(FAIL)
    Condition(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, PASS)
        |  Message: DEFAULT MESSAGE(PASS)
        Clause( %s3_buckets_server_side_encryption not EMPTY  , PASS)
            |  From: Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket"))} }))} }))
            |  Message: DEFAULT MESSAGE(PASS)
    Clause( %s3_buckets_server_side_encryption[*].Properties.BucketEncryption EXISTS  , FAIL)
        |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources", Location { line: 0, col: 0 }), "Resources"))], values: {"Resources": Map((Path("/Resources", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), "ExampleS3"))], values: {"ExampleS3": Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket"))} }))} }))} }))} }))
        |  Message: (DEFAULT: NO_MESSAGE)
    Clause( %s3_buckets_server_side_encryption[*].Properties.BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm IN  ["aws:kms","AES256"], FAIL)
        |  Message: Attempting to retrieve array index or key from map at path = /Resources/ExampleS3/Properties[L:0,C:0] , Type was not an array/object map, Remaining Query = BucketEncryption.ServerSideEncryptionConfiguration[*].ServerSideEncryptionByDefault.SSEAlgorithm
  PASS Rules:
    S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED: Expected = FAIL, Evaluated = FAIL

Test Case #6
Name: S3 Bucket Encryption not set but rule is suppressed, SKIP
Rule(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, SKIP)
    |  Message: DEFAULT MESSAGE(SKIP)
    Condition(S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED, FAIL)
        |  Message: DEFAULT MESSAGE(FAIL)
        Clause( %s3_buckets_server_side_encryption not EMPTY  , FAIL)
            |  From: Map((Path("", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources", Location { line: 0, col: 0 }), "Resources"))], values: {"Resources": Map((Path("/Resources", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), "ExampleS3"))], values: {"ExampleS3": Map((Path("/Resources/ExampleS3", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "Type")), String((Path("/Resources/ExampleS3/Metadata", Location { line: 0, col: 0 }), "Metadata")), String((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), "Properties"))], values: {"Type": String((Path("/Resources/ExampleS3/Type", Location { line: 0, col: 0 }), "AWS::S3::Bucket")), "Metadata": Map((Path("/Resources/ExampleS3/Metadata", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Metadata/guard", Location { line: 0, col: 0 }), "guard"))], values: {"guard": Map((Path("/Resources/ExampleS3/Metadata/guard", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Metadata/guard/SuppressedRules", Location { line: 0, col: 0 }), "SuppressedRules"))], values: {"SuppressedRules": List((Path("/Resources/ExampleS3/Metadata/guard/SuppressedRules", Location { line: 0, col: 0 }), [String((Path("/Resources/ExampleS3/Metadata/guard/SuppressedRules/0", Location { line: 0, col: 0 }), "S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED"))]))} }))} })), "Properties": Map((Path("/Resources/ExampleS3/Properties", Location { line: 0, col: 0 }), MapValue { keys: [String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "BucketName"))], values: {"BucketName": String((Path("/Resources/ExampleS3/Properties/BucketName", Location { line: 0, col: 0 }), "my-bucket"))} }))} }))} }))} }))
            |  Message: (DEFAULT: NO_MESSAGE)
  PASS Rules:
    S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED: Expected = SKIP, Evaluated = SKIP

---
